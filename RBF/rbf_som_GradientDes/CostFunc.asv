function [J grad] = CostFunc(nn_params, ...
                             input_layer_size, ...
                             num_labels, ...
                             X, y)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network
%nn_params=initial_nn_params;
Theta1 = reshape(nn_params(1:num_labels * (input_layer_size + 1)), ...
                 num_labels, (input_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
%Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%
% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%
% -------------------------------------------------------------

  X=[ones(m,1) X];

for i=1:m,
     Z2=Theta1*(X(i,:))';
     a2=sigmoid(Z2);
     
	 y1=[1:num_labels];
     %I am hardcoring it wen i write y1=[1:10];
	 y1=y1';
     y1=(y1==y(i));
     %y1=eye(num_labels);
	 A=log(a3);
     B=log(1-a3);
     D=(1-y1).* B;
	 C=y1 .* A;
     E= - C - D;
     F=sum(E);
     G=F/m;
     J=J+G;     
end	 

% Implementing backpropagation using Vectorization

a1=X;
Z2=X*Theta1';
a2=sigmoid(Z2);

y_matrix=y;
% d3=a3-y_matrix;
% d2=d3*Theta2(:,2:end) .* sigmoidGradient(Z2);
% Theta1_grad=d2'*a1;
% Theta2_grad=d3'*a2;

d2=a2-y_matrix;
Theta1_grad=d2'*a2;

Theta2_grad=Theta2_grad/m;


% Regularizing the gradient
m1=size(Theta1_grad,1);
n1=size(Theta1_grad,2);
m2=size(Theta2_grad,1);
n2=size(Theta2_grad,2);
   for i=1:m1,
       for j=2:n1,
	     Theta1_grad(i,j)=Theta1_grad(i,j)+(lambda*Theta1(i,j))/m; % all have already been divided by m. we have to add lambda*theta1(i,j)where j!=1
       end	 
   end 
   for i=1:m2,
      for j=2:n2,
	    Theta2_grad(i,j)=Theta2_grad(i,j)+(lambda*Theta2(i,j))/m;
      end
   end

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


end
